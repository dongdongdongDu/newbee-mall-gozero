// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tbNewbeeMallGoodsInfoFieldNames          = builder.RawFieldNames(&TbNewbeeMallGoodsInfo{})
	tbNewbeeMallGoodsInfoRows                = strings.Join(tbNewbeeMallGoodsInfoFieldNames, ",")
	tbNewbeeMallGoodsInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(tbNewbeeMallGoodsInfoFieldNames, "`goods_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	tbNewbeeMallGoodsInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(tbNewbeeMallGoodsInfoFieldNames, "`goods_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheTbNewbeeMallGoodsInfoGoodsIdPrefix = "cache:tbNewbeeMallGoodsInfo:goodsId:"
)

type (
	tbNewbeeMallGoodsInfoModel interface {
		Insert(ctx context.Context, data *TbNewbeeMallGoodsInfo) (sql.Result, error)
		FindOne(ctx context.Context, goodsId int64) (*TbNewbeeMallGoodsInfo, error)
		Update(ctx context.Context, data *TbNewbeeMallGoodsInfo) error
		Delete(ctx context.Context, goodsId int64) error
	}

	defaultTbNewbeeMallGoodsInfoModel struct {
		sqlc.CachedConn
		table string
	}

	TbNewbeeMallGoodsInfo struct {
		GoodsId            int64     `db:"goods_id"`             // 商品表主键id
		GoodsName          string    `db:"goods_name"`           // 商品名
		GoodsIntro         string    `db:"goods_intro"`          // 商品简介
		GoodsCategoryId    int64     `db:"goods_category_id"`    // 关联分类id
		GoodsCoverImg      string    `db:"goods_cover_img"`      // 商品主图
		GoodsCarousel      string    `db:"goods_carousel"`       // 商品轮播图
		GoodsDetailContent string    `db:"goods_detail_content"` // 商品详情
		OriginalPrice      int64     `db:"original_price"`       // 商品价格
		SellingPrice       int64     `db:"selling_price"`        // 商品实际售价
		StockNum           int64     `db:"stock_num"`            // 商品库存数量
		Tag                string    `db:"tag"`                  // 商品标签
		GoodsSellStatus    int64     `db:"goods_sell_status"`    // 商品上架状态 1-下架 0-上架
		CreateUser         int64     `db:"create_user"`          // 添加者主键id
		CreateTime         time.Time `db:"create_time"`          // 商品添加时间
		UpdateUser         int64     `db:"update_user"`          // 修改者主键id
		UpdateTime         time.Time `db:"update_time"`          // 商品修改时间
	}
)

func newTbNewbeeMallGoodsInfoModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultTbNewbeeMallGoodsInfoModel {
	return &defaultTbNewbeeMallGoodsInfoModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`tb_newbee_mall_goods_info`",
	}
}

func (m *defaultTbNewbeeMallGoodsInfoModel) Delete(ctx context.Context, goodsId int64) error {
	tbNewbeeMallGoodsInfoGoodsIdKey := fmt.Sprintf("%s%v", cacheTbNewbeeMallGoodsInfoGoodsIdPrefix, goodsId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `goods_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, goodsId)
	}, tbNewbeeMallGoodsInfoGoodsIdKey)
	return err
}

func (m *defaultTbNewbeeMallGoodsInfoModel) FindOne(ctx context.Context, goodsId int64) (*TbNewbeeMallGoodsInfo, error) {
	tbNewbeeMallGoodsInfoGoodsIdKey := fmt.Sprintf("%s%v", cacheTbNewbeeMallGoodsInfoGoodsIdPrefix, goodsId)
	var resp TbNewbeeMallGoodsInfo
	err := m.QueryRowCtx(ctx, &resp, tbNewbeeMallGoodsInfoGoodsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `goods_id` = ? limit 1", tbNewbeeMallGoodsInfoRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, goodsId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbNewbeeMallGoodsInfoModel) Insert(ctx context.Context, data *TbNewbeeMallGoodsInfo) (sql.Result, error) {
	tbNewbeeMallGoodsInfoGoodsIdKey := fmt.Sprintf("%s%v", cacheTbNewbeeMallGoodsInfoGoodsIdPrefix, data.GoodsId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, tbNewbeeMallGoodsInfoRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.GoodsName, data.GoodsIntro, data.GoodsCategoryId, data.GoodsCoverImg, data.GoodsCarousel, data.GoodsDetailContent, data.OriginalPrice, data.SellingPrice, data.StockNum, data.Tag, data.GoodsSellStatus, data.CreateUser, data.UpdateUser)
	}, tbNewbeeMallGoodsInfoGoodsIdKey)
	return ret, err
}

func (m *defaultTbNewbeeMallGoodsInfoModel) Update(ctx context.Context, data *TbNewbeeMallGoodsInfo) error {
	tbNewbeeMallGoodsInfoGoodsIdKey := fmt.Sprintf("%s%v", cacheTbNewbeeMallGoodsInfoGoodsIdPrefix, data.GoodsId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `goods_id` = ?", m.table, tbNewbeeMallGoodsInfoRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.GoodsName, data.GoodsIntro, data.GoodsCategoryId, data.GoodsCoverImg, data.GoodsCarousel, data.GoodsDetailContent, data.OriginalPrice, data.SellingPrice, data.StockNum, data.Tag, data.GoodsSellStatus, data.CreateUser, data.UpdateUser, data.GoodsId)
	}, tbNewbeeMallGoodsInfoGoodsIdKey)
	return err
}

func (m *defaultTbNewbeeMallGoodsInfoModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheTbNewbeeMallGoodsInfoGoodsIdPrefix, primary)
}

func (m *defaultTbNewbeeMallGoodsInfoModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `goods_id` = ? limit 1", tbNewbeeMallGoodsInfoRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTbNewbeeMallGoodsInfoModel) tableName() string {
	return m.table
}
