// Code generated by goctl. DO NOT EDIT!
// Source: useraddress.proto

package useraddress

import (
	"context"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Useraddress interface {
		SaveAddress(ctx context.Context, in *SaveAddressRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
		UpdateAddress(ctx context.Context, in *UpdateAddressRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
		DeleteAddress(ctx context.Context, in *DeleteAddressRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
		GetMyAddress(ctx context.Context, in *GetMyAddressRequest, opts ...grpc.CallOption) (*GetMyAddressResponse, error)
		GetAddressById(ctx context.Context, in *GetAddressByIdRequest, opts ...grpc.CallOption) (*GetAddressByIdResponse, error)
		GetDefaultAddress(ctx context.Context, in *GetDefaultAddressRequest, opts ...grpc.CallOption) (*GetDefaultAddressResponse, error)
	}

	defaultUseraddress struct {
		cli zrpc.Client
	}
)

func NewUseraddress(cli zrpc.Client) Useraddress {
	return &defaultUseraddress{
		cli: cli,
	}
}

func (m *defaultUseraddress) SaveAddress(ctx context.Context, in *SaveAddressRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	client := NewUseraddressClient(m.cli.Conn())
	return client.SaveAddress(ctx, in, opts...)
}

func (m *defaultUseraddress) UpdateAddress(ctx context.Context, in *UpdateAddressRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	client := NewUseraddressClient(m.cli.Conn())
	return client.UpdateAddress(ctx, in, opts...)
}

func (m *defaultUseraddress) DeleteAddress(ctx context.Context, in *DeleteAddressRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	client := NewUseraddressClient(m.cli.Conn())
	return client.DeleteAddress(ctx, in, opts...)
}

func (m *defaultUseraddress) GetMyAddress(ctx context.Context, in *GetMyAddressRequest, opts ...grpc.CallOption) (*GetMyAddressResponse, error) {
	client := NewUseraddressClient(m.cli.Conn())
	return client.GetMyAddress(ctx, in, opts...)
}

func (m *defaultUseraddress) GetAddressById(ctx context.Context, in *GetAddressByIdRequest, opts ...grpc.CallOption) (*GetAddressByIdResponse, error) {
	client := NewUseraddressClient(m.cli.Conn())
	return client.GetAddressById(ctx, in, opts...)
}

func (m *defaultUseraddress) GetDefaultAddress(ctx context.Context, in *GetDefaultAddressRequest, opts ...grpc.CallOption) (*GetDefaultAddressResponse, error) {
	client := NewUseraddressClient(m.cli.Conn())
	return client.GetDefaultAddress(ctx, in, opts...)
}
