// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tbNewbeeMallUserAddressFieldNames          = builder.RawFieldNames(&TbNewbeeMallUserAddress{})
	tbNewbeeMallUserAddressRows                = strings.Join(tbNewbeeMallUserAddressFieldNames, ",")
	tbNewbeeMallUserAddressRowsExpectAutoSet   = strings.Join(stringx.Remove(tbNewbeeMallUserAddressFieldNames, "`address_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	tbNewbeeMallUserAddressRowsWithPlaceHolder = strings.Join(stringx.Remove(tbNewbeeMallUserAddressFieldNames, "`address_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheTbNewbeeMallUserAddressAddressIdPrefix = "cache:tbNewbeeMallUserAddress:addressId:"
)

type (
	tbNewbeeMallUserAddressModel interface {
		Insert(ctx context.Context, data *TbNewbeeMallUserAddress) (sql.Result, error)
		FindOne(ctx context.Context, addressId int64) (*TbNewbeeMallUserAddress, error)
		Update(ctx context.Context, data *TbNewbeeMallUserAddress) error
		Delete(ctx context.Context, addressId int64) error
	}

	defaultTbNewbeeMallUserAddressModel struct {
		sqlc.CachedConn
		table string
	}

	TbNewbeeMallUserAddress struct {
		AddressId     int64     `db:"address_id"`
		UserId        int64     `db:"user_id"`        // 用户主键id
		UserName      string    `db:"user_name"`      // 收货人姓名
		UserPhone     string    `db:"user_phone"`     // 收货人手机号
		DefaultFlag   int64     `db:"default_flag"`   // 是否为默认 0-非默认 1-是默认
		ProvinceName  string    `db:"province_name"`  // 省
		CityName      string    `db:"city_name"`      // 城
		RegionName    string    `db:"region_name"`    // 区
		DetailAddress string    `db:"detail_address"` // 收件详细地址(街道/楼宇/单元)
		IsDeleted     int64     `db:"is_deleted"`     // 删除标识字段(0-未删除 1-已删除)
		CreateTime    time.Time `db:"create_time"`    // 添加时间
		UpdateTime    time.Time `db:"update_time"`    // 修改时间
	}
)

func newTbNewbeeMallUserAddressModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultTbNewbeeMallUserAddressModel {
	return &defaultTbNewbeeMallUserAddressModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`tb_newbee_mall_user_address`",
	}
}

func (m *defaultTbNewbeeMallUserAddressModel) Delete(ctx context.Context, addressId int64) error {
	tbNewbeeMallUserAddressAddressIdKey := fmt.Sprintf("%s%v", cacheTbNewbeeMallUserAddressAddressIdPrefix, addressId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `address_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, addressId)
	}, tbNewbeeMallUserAddressAddressIdKey)
	return err
}

func (m *defaultTbNewbeeMallUserAddressModel) FindOne(ctx context.Context, addressId int64) (*TbNewbeeMallUserAddress, error) {
	tbNewbeeMallUserAddressAddressIdKey := fmt.Sprintf("%s%v", cacheTbNewbeeMallUserAddressAddressIdPrefix, addressId)
	var resp TbNewbeeMallUserAddress
	err := m.QueryRowCtx(ctx, &resp, tbNewbeeMallUserAddressAddressIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `address_id` = ? limit 1", tbNewbeeMallUserAddressRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, addressId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbNewbeeMallUserAddressModel) Insert(ctx context.Context, data *TbNewbeeMallUserAddress) (sql.Result, error) {
	tbNewbeeMallUserAddressAddressIdKey := fmt.Sprintf("%s%v", cacheTbNewbeeMallUserAddressAddressIdPrefix, data.AddressId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, tbNewbeeMallUserAddressRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.UserName, data.UserPhone, data.DefaultFlag, data.ProvinceName, data.CityName, data.RegionName, data.DetailAddress, data.IsDeleted)
	}, tbNewbeeMallUserAddressAddressIdKey)
	return ret, err
}

func (m *defaultTbNewbeeMallUserAddressModel) Update(ctx context.Context, data *TbNewbeeMallUserAddress) error {
	tbNewbeeMallUserAddressAddressIdKey := fmt.Sprintf("%s%v", cacheTbNewbeeMallUserAddressAddressIdPrefix, data.AddressId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `address_id` = ?", m.table, tbNewbeeMallUserAddressRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.UserName, data.UserPhone, data.DefaultFlag, data.ProvinceName, data.CityName, data.RegionName, data.DetailAddress, data.IsDeleted, data.AddressId)
	}, tbNewbeeMallUserAddressAddressIdKey)
	return err
}

func (m *defaultTbNewbeeMallUserAddressModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheTbNewbeeMallUserAddressAddressIdPrefix, primary)
}

func (m *defaultTbNewbeeMallUserAddressModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `address_id` = ? limit 1", tbNewbeeMallUserAddressRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTbNewbeeMallUserAddressModel) tableName() string {
	return m.table
}
