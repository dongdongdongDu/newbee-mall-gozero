// Code generated by goctl. DO NOT EDIT!

package order_item

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tbNewbeeMallOrderItemFieldNames          = builder.RawFieldNames(&TbNewbeeMallOrderItem{})
	tbNewbeeMallOrderItemRows                = strings.Join(tbNewbeeMallOrderItemFieldNames, ",")
	tbNewbeeMallOrderItemRowsExpectAutoSet   = strings.Join(stringx.Remove(tbNewbeeMallOrderItemFieldNames, "`order_item_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	tbNewbeeMallOrderItemRowsWithPlaceHolder = strings.Join(stringx.Remove(tbNewbeeMallOrderItemFieldNames, "`order_item_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheTbNewbeeMallOrderItemOrderItemIdPrefix = "cache:tbNewbeeMallOrderItem:orderItemId:"
)

type (
	tbNewbeeMallOrderItemModel interface {
		Insert(ctx context.Context, data *TbNewbeeMallOrderItem) (sql.Result, error)
		FindOne(ctx context.Context, orderItemId int64) (*TbNewbeeMallOrderItem, error)
		Update(ctx context.Context, data *TbNewbeeMallOrderItem) error
		Delete(ctx context.Context, orderItemId int64) error
	}

	defaultTbNewbeeMallOrderItemModel struct {
		sqlc.CachedConn
		table string
	}

	TbNewbeeMallOrderItem struct {
		OrderItemId   int64     `db:"order_item_id"`   // 订单关联购物项主键id
		OrderId       int64     `db:"order_id"`        // 订单主键id
		GoodsId       int64     `db:"goods_id"`        // 关联商品id
		GoodsName     string    `db:"goods_name"`      // 下单时商品的名称(订单快照)
		GoodsCoverImg string    `db:"goods_cover_img"` // 下单时商品的主图(订单快照)
		SellingPrice  int64     `db:"selling_price"`   // 下单时商品的价格(订单快照)
		GoodsCount    int64     `db:"goods_count"`     // 数量(订单快照)
		CreateTime    time.Time `db:"create_time"`     // 创建时间
	}
)

func newTbNewbeeMallOrderItemModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultTbNewbeeMallOrderItemModel {
	return &defaultTbNewbeeMallOrderItemModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`tb_newbee_mall_order_item`",
	}
}

func (m *defaultTbNewbeeMallOrderItemModel) Delete(ctx context.Context, orderItemId int64) error {
	tbNewbeeMallOrderItemOrderItemIdKey := fmt.Sprintf("%s%v", cacheTbNewbeeMallOrderItemOrderItemIdPrefix, orderItemId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `order_item_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, orderItemId)
	}, tbNewbeeMallOrderItemOrderItemIdKey)
	return err
}

func (m *defaultTbNewbeeMallOrderItemModel) FindOne(ctx context.Context, orderItemId int64) (*TbNewbeeMallOrderItem, error) {
	tbNewbeeMallOrderItemOrderItemIdKey := fmt.Sprintf("%s%v", cacheTbNewbeeMallOrderItemOrderItemIdPrefix, orderItemId)
	var resp TbNewbeeMallOrderItem
	err := m.QueryRowCtx(ctx, &resp, tbNewbeeMallOrderItemOrderItemIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `order_item_id` = ? limit 1", tbNewbeeMallOrderItemRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, orderItemId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbNewbeeMallOrderItemModel) Insert(ctx context.Context, data *TbNewbeeMallOrderItem) (sql.Result, error) {
	tbNewbeeMallOrderItemOrderItemIdKey := fmt.Sprintf("%s%v", cacheTbNewbeeMallOrderItemOrderItemIdPrefix, data.OrderItemId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, tbNewbeeMallOrderItemRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.OrderId, data.GoodsId, data.GoodsName, data.GoodsCoverImg, data.SellingPrice, data.GoodsCount)
	}, tbNewbeeMallOrderItemOrderItemIdKey)
	return ret, err
}

func (m *defaultTbNewbeeMallOrderItemModel) Update(ctx context.Context, data *TbNewbeeMallOrderItem) error {
	tbNewbeeMallOrderItemOrderItemIdKey := fmt.Sprintf("%s%v", cacheTbNewbeeMallOrderItemOrderItemIdPrefix, data.OrderItemId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `order_item_id` = ?", m.table, tbNewbeeMallOrderItemRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.OrderId, data.GoodsId, data.GoodsName, data.GoodsCoverImg, data.SellingPrice, data.GoodsCount, data.OrderItemId)
	}, tbNewbeeMallOrderItemOrderItemIdKey)
	return err
}

func (m *defaultTbNewbeeMallOrderItemModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheTbNewbeeMallOrderItemOrderItemIdPrefix, primary)
}

func (m *defaultTbNewbeeMallOrderItemModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `order_item_id` = ? limit 1", tbNewbeeMallOrderItemRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTbNewbeeMallOrderItemModel) tableName() string {
	return m.table
}
