// Code generated by goctl. DO NOT EDIT!

package order_address

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tbNewbeeMallOrderAddressFieldNames          = builder.RawFieldNames(&TbNewbeeMallOrderAddress{})
	tbNewbeeMallOrderAddressRows                = strings.Join(tbNewbeeMallOrderAddressFieldNames, ",")
	tbNewbeeMallOrderAddressRowsExpectAutoSet   = strings.Join(stringx.Remove(tbNewbeeMallOrderAddressFieldNames, "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	tbNewbeeMallOrderAddressRowsWithPlaceHolder = strings.Join(stringx.Remove(tbNewbeeMallOrderAddressFieldNames, "`order_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheTbNewbeeMallOrderAddressOrderIdPrefix = "cache:tbNewbeeMallOrderAddress:orderId:"
)

type (
	tbNewbeeMallOrderAddressModel interface {
		Insert(ctx context.Context, data *TbNewbeeMallOrderAddress) (sql.Result, error)
		FindOne(ctx context.Context, orderId int64) (*TbNewbeeMallOrderAddress, error)
		Update(ctx context.Context, data *TbNewbeeMallOrderAddress) error
		Delete(ctx context.Context, orderId int64) error
	}

	defaultTbNewbeeMallOrderAddressModel struct {
		sqlc.CachedConn
		table string
	}

	TbNewbeeMallOrderAddress struct {
		OrderId       int64  `db:"order_id"`
		UserName      string `db:"user_name"`      // 收货人姓名
		UserPhone     string `db:"user_phone"`     // 收货人手机号
		ProvinceName  string `db:"province_name"`  // 省
		CityName      string `db:"city_name"`      // 城
		RegionName    string `db:"region_name"`    // 区
		DetailAddress string `db:"detail_address"` // 收件详细地址(街道/楼宇/单元)
	}
)

func newTbNewbeeMallOrderAddressModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultTbNewbeeMallOrderAddressModel {
	return &defaultTbNewbeeMallOrderAddressModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`tb_newbee_mall_order_address`",
	}
}

func (m *defaultTbNewbeeMallOrderAddressModel) Delete(ctx context.Context, orderId int64) error {
	tbNewbeeMallOrderAddressOrderIdKey := fmt.Sprintf("%s%v", cacheTbNewbeeMallOrderAddressOrderIdPrefix, orderId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `order_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, orderId)
	}, tbNewbeeMallOrderAddressOrderIdKey)
	return err
}

func (m *defaultTbNewbeeMallOrderAddressModel) FindOne(ctx context.Context, orderId int64) (*TbNewbeeMallOrderAddress, error) {
	tbNewbeeMallOrderAddressOrderIdKey := fmt.Sprintf("%s%v", cacheTbNewbeeMallOrderAddressOrderIdPrefix, orderId)
	var resp TbNewbeeMallOrderAddress
	err := m.QueryRowCtx(ctx, &resp, tbNewbeeMallOrderAddressOrderIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `order_id` = ? limit 1", tbNewbeeMallOrderAddressRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, orderId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbNewbeeMallOrderAddressModel) Insert(ctx context.Context, data *TbNewbeeMallOrderAddress) (sql.Result, error) {
	tbNewbeeMallOrderAddressOrderIdKey := fmt.Sprintf("%s%v", cacheTbNewbeeMallOrderAddressOrderIdPrefix, data.OrderId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, tbNewbeeMallOrderAddressRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.OrderId, data.UserName, data.UserPhone, data.ProvinceName, data.CityName, data.RegionName, data.DetailAddress)
	}, tbNewbeeMallOrderAddressOrderIdKey)
	return ret, err
}

func (m *defaultTbNewbeeMallOrderAddressModel) Update(ctx context.Context, data *TbNewbeeMallOrderAddress) error {
	tbNewbeeMallOrderAddressOrderIdKey := fmt.Sprintf("%s%v", cacheTbNewbeeMallOrderAddressOrderIdPrefix, data.OrderId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `order_id` = ?", m.table, tbNewbeeMallOrderAddressRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserName, data.UserPhone, data.ProvinceName, data.CityName, data.RegionName, data.DetailAddress, data.OrderId)
	}, tbNewbeeMallOrderAddressOrderIdKey)
	return err
}

func (m *defaultTbNewbeeMallOrderAddressModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheTbNewbeeMallOrderAddressOrderIdPrefix, primary)
}

func (m *defaultTbNewbeeMallOrderAddressModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `order_id` = ? limit 1", tbNewbeeMallOrderAddressRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTbNewbeeMallOrderAddressModel) tableName() string {
	return m.table
}
