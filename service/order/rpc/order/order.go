// Code generated by goctl. DO NOT EDIT!
// Source: order.proto

package order

import (
	"context"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Order interface {
		AddOrder(ctx context.Context, in *AddOrderRequest, opts ...grpc.CallOption) (*AddOrderResponse, error)
		PaySuccess(ctx context.Context, in *PaySuccessRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
		FinishOrder(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
		CancelOrder(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
		GetOrderDetail(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*GetOrderDetailResponse, error)
		GetOrderList(ctx context.Context, in *GetOrderListRequest, opts ...grpc.CallOption) (*GetOrderListResponse, error)
		ShipOrder(ctx context.Context, in *CheckOrderRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
		CheckOrder(ctx context.Context, in *CheckOrderRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
		CloseOrder(ctx context.Context, in *CheckOrderRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
		GetOrderById(ctx context.Context, in *GetOrderByIdRequest, opts ...grpc.CallOption) (*GetOrderByIdResponse, error)
		GetOrdersList(ctx context.Context, in *GetOrdersListRequest, opts ...grpc.CallOption) (*GetOrdersListResponse, error)
		DeferCloseOrder(ctx context.Context, in *DeferCloseRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	}

	defaultOrder struct {
		cli zrpc.Client
	}
)

func NewOrder(cli zrpc.Client) Order {
	return &defaultOrder{
		cli: cli,
	}
}

func (m *defaultOrder) AddOrder(ctx context.Context, in *AddOrderRequest, opts ...grpc.CallOption) (*AddOrderResponse, error) {
	client := NewOrderClient(m.cli.Conn())
	return client.AddOrder(ctx, in, opts...)
}

func (m *defaultOrder) PaySuccess(ctx context.Context, in *PaySuccessRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	client := NewOrderClient(m.cli.Conn())
	return client.PaySuccess(ctx, in, opts...)
}

func (m *defaultOrder) FinishOrder(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	client := NewOrderClient(m.cli.Conn())
	return client.FinishOrder(ctx, in, opts...)
}

func (m *defaultOrder) CancelOrder(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	client := NewOrderClient(m.cli.Conn())
	return client.CancelOrder(ctx, in, opts...)
}

func (m *defaultOrder) GetOrderDetail(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*GetOrderDetailResponse, error) {
	client := NewOrderClient(m.cli.Conn())
	return client.GetOrderDetail(ctx, in, opts...)
}

func (m *defaultOrder) GetOrderList(ctx context.Context, in *GetOrderListRequest, opts ...grpc.CallOption) (*GetOrderListResponse, error) {
	client := NewOrderClient(m.cli.Conn())
	return client.GetOrderList(ctx, in, opts...)
}

func (m *defaultOrder) ShipOrder(ctx context.Context, in *CheckOrderRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	client := NewOrderClient(m.cli.Conn())
	return client.ShipOrder(ctx, in, opts...)
}

func (m *defaultOrder) CheckOrder(ctx context.Context, in *CheckOrderRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	client := NewOrderClient(m.cli.Conn())
	return client.CheckOrder(ctx, in, opts...)
}

func (m *defaultOrder) CloseOrder(ctx context.Context, in *CheckOrderRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	client := NewOrderClient(m.cli.Conn())
	return client.CloseOrder(ctx, in, opts...)
}

func (m *defaultOrder) GetOrderById(ctx context.Context, in *GetOrderByIdRequest, opts ...grpc.CallOption) (*GetOrderByIdResponse, error) {
	client := NewOrderClient(m.cli.Conn())
	return client.GetOrderById(ctx, in, opts...)
}

func (m *defaultOrder) GetOrdersList(ctx context.Context, in *GetOrdersListRequest, opts ...grpc.CallOption) (*GetOrdersListResponse, error) {
	client := NewOrderClient(m.cli.Conn())
	return client.GetOrdersList(ctx, in, opts...)
}

func (m *defaultOrder) DeferCloseOrder(ctx context.Context, in *DeferCloseRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	client := NewOrderClient(m.cli.Conn())
	return client.DeferCloseOrder(ctx, in, opts...)
}
