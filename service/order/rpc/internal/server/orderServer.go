// Code generated by goctl. DO NOT EDIT!
// Source: order.proto

package server

import (
	"context"
	"newbee-mall-gozero/service/order/rpc/internal/logic/admin"
	"newbee-mall-gozero/service/order/rpc/internal/logic/user"

	"newbee-mall-gozero/service/order/rpc/internal/logic"
	"newbee-mall-gozero/service/order/rpc/internal/svc"
	"newbee-mall-gozero/service/order/rpc/order"
)

type OrderServer struct {
	svcCtx *svc.ServiceContext
	order.UnimplementedOrderServer
}

func NewOrderServer(svcCtx *svc.ServiceContext) *OrderServer {
	return &OrderServer{
		svcCtx: svcCtx,
	}
}

func (s *OrderServer) AddOrder(ctx context.Context, in *order.AddOrderRequest) (*order.AddOrderResponse, error) {
	l := user.NewAddOrderLogic(ctx, s.svcCtx)
	return l.AddOrder(in)
}

func (s *OrderServer) PaySuccess(ctx context.Context, in *order.PaySuccessRequest) (*order.EmptyResponse, error) {
	l := user.NewPaySuccessLogic(ctx, s.svcCtx)
	return l.PaySuccess(in)
}

func (s *OrderServer) FinishOrder(ctx context.Context, in *order.OrderRequest) (*order.EmptyResponse, error) {
	l := user.NewFinishOrderLogic(ctx, s.svcCtx)
	return l.FinishOrder(in)
}

func (s *OrderServer) CancelOrder(ctx context.Context, in *order.OrderRequest) (*order.EmptyResponse, error) {
	l := user.NewCancelOrderLogic(ctx, s.svcCtx)
	return l.CancelOrder(in)
}

func (s *OrderServer) GetOrderDetail(ctx context.Context, in *order.OrderRequest) (*order.GetOrderDetailResponse, error) {
	l := user.NewGetOrderDetailLogic(ctx, s.svcCtx)
	return l.GetOrderDetail(in)
}

func (s *OrderServer) GetOrderList(ctx context.Context, in *order.GetOrderListRequest) (*order.GetOrderListResponse, error) {
	l := user.NewGetOrderListLogic(ctx, s.svcCtx)
	return l.GetOrderList(in)
}

func (s *OrderServer) ShipOrder(ctx context.Context, in *order.CheckOrderRequest) (*order.EmptyResponse, error) {
	l := admin.NewShipOrderLogic(ctx, s.svcCtx)
	return l.ShipOrder(in)
}

func (s *OrderServer) CheckOrder(ctx context.Context, in *order.CheckOrderRequest) (*order.EmptyResponse, error) {
	l := admin.NewCheckOrderLogic(ctx, s.svcCtx)
	return l.CheckOrder(in)
}

func (s *OrderServer) CloseOrder(ctx context.Context, in *order.CheckOrderRequest) (*order.EmptyResponse, error) {
	l := admin.NewCloseOrderLogic(ctx, s.svcCtx)
	return l.CloseOrder(in)
}

func (s *OrderServer) GetOrderById(ctx context.Context, in *order.GetOrderByIdRequest) (*order.GetOrderByIdResponse, error) {
	l := admin.NewGetOrderByIdLogic(ctx, s.svcCtx)
	return l.GetOrderById(in)
}

func (s *OrderServer) GetOrdersList(ctx context.Context, in *order.GetOrdersListRequest) (*order.GetOrdersListResponse, error) {
	l := admin.NewGetOrdersListLogic(ctx, s.svcCtx)
	return l.GetOrdersList(in)
}

func (s *OrderServer) DeferCloseOrder(ctx context.Context, in *order.DeferCloseRequest) (*order.EmptyResponse, error) {
	l := logic.NewDeferCloseOrderLogic(ctx, s.svcCtx)
	return l.DeferCloseOrder(in)
}
