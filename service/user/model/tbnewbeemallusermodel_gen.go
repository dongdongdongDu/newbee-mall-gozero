// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tbNewbeeMallUserFieldNames          = builder.RawFieldNames(&TbNewbeeMallUser{})
	tbNewbeeMallUserRows                = strings.Join(tbNewbeeMallUserFieldNames, ",")
	tbNewbeeMallUserRowsExpectAutoSet   = strings.Join(stringx.Remove(tbNewbeeMallUserFieldNames, "`user_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	tbNewbeeMallUserRowsWithPlaceHolder = strings.Join(stringx.Remove(tbNewbeeMallUserFieldNames, "`user_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheTbNewbeeMallUserUserIdPrefix    = "cache:tbNewbeeMallUser:userId:"
	cacheTbNewbeeMallUserLoginNamePrefix = "cache:tbNewbeeMallUser:loginName:"
)

type (
	tbNewbeeMallUserModel interface {
		Insert(ctx context.Context, data *TbNewbeeMallUser) (sql.Result, error)
		FindOne(ctx context.Context, userId int64) (*TbNewbeeMallUser, error)
		FindOneByLoginName(ctx context.Context, loginName string) (*TbNewbeeMallUser, error)
		Update(ctx context.Context, data *TbNewbeeMallUser) error
		Delete(ctx context.Context, userId int64) error
	}

	defaultTbNewbeeMallUserModel struct {
		sqlc.CachedConn
		table string
	}

	TbNewbeeMallUser struct {
		UserId        int64     `db:"user_id"`        // 用户主键id
		NickName      string    `db:"nick_name"`      // 用户昵称
		LoginName     string    `db:"login_name"`     // 登陆名称(默认为手机号)
		PasswordMd5   string    `db:"password_md5"`   // MD5加密后的密码
		IntroduceSign string    `db:"introduce_sign"` // 个性签名
		IsDeleted     int64     `db:"is_deleted"`     // 注销标识字段(0-正常 1-已注销)
		LockedFlag    int64     `db:"locked_flag"`    // 锁定标识字段(0-未锁定 1-已锁定)
		CreateTime    time.Time `db:"create_time"`    // 注册时间
	}
)

func newTbNewbeeMallUserModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultTbNewbeeMallUserModel {
	return &defaultTbNewbeeMallUserModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`tb_newbee_mall_user`",
	}
}

func (m *defaultTbNewbeeMallUserModel) Delete(ctx context.Context, userId int64) error {
	data, err := m.FindOne(ctx, userId)
	if err != nil {
		return err
	}

	tbNewbeeMallUserLoginNameKey := fmt.Sprintf("%s%v", cacheTbNewbeeMallUserLoginNamePrefix, data.LoginName)
	tbNewbeeMallUserUserIdKey := fmt.Sprintf("%s%v", cacheTbNewbeeMallUserUserIdPrefix, userId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `user_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, userId)
	}, tbNewbeeMallUserLoginNameKey, tbNewbeeMallUserUserIdKey)
	return err
}

func (m *defaultTbNewbeeMallUserModel) FindOne(ctx context.Context, userId int64) (*TbNewbeeMallUser, error) {
	tbNewbeeMallUserUserIdKey := fmt.Sprintf("%s%v", cacheTbNewbeeMallUserUserIdPrefix, userId)
	var resp TbNewbeeMallUser
	err := m.QueryRowCtx(ctx, &resp, tbNewbeeMallUserUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", tbNewbeeMallUserRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, userId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbNewbeeMallUserModel) FindOneByLoginName(ctx context.Context, loginName string) (*TbNewbeeMallUser, error) {
	tbNewbeeMallUserLoginNameKey := fmt.Sprintf("%s%v", cacheTbNewbeeMallUserLoginNamePrefix, loginName)
	var resp TbNewbeeMallUser
	err := m.QueryRowIndexCtx(ctx, &resp, tbNewbeeMallUserLoginNameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `login_name` = ? limit 1", tbNewbeeMallUserRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, loginName); err != nil {
			return nil, err
		}
		return resp.UserId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbNewbeeMallUserModel) Insert(ctx context.Context, data *TbNewbeeMallUser) (sql.Result, error) {
	tbNewbeeMallUserLoginNameKey := fmt.Sprintf("%s%v", cacheTbNewbeeMallUserLoginNamePrefix, data.LoginName)
	tbNewbeeMallUserUserIdKey := fmt.Sprintf("%s%v", cacheTbNewbeeMallUserUserIdPrefix, data.UserId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, tbNewbeeMallUserRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.NickName, data.LoginName, data.PasswordMd5, data.IntroduceSign, data.IsDeleted, data.LockedFlag)
	}, tbNewbeeMallUserLoginNameKey, tbNewbeeMallUserUserIdKey)
	return ret, err
}

func (m *defaultTbNewbeeMallUserModel) Update(ctx context.Context, newData *TbNewbeeMallUser) error {
	data, err := m.FindOne(ctx, newData.UserId)
	if err != nil {
		return err
	}

	tbNewbeeMallUserLoginNameKey := fmt.Sprintf("%s%v", cacheTbNewbeeMallUserLoginNamePrefix, data.LoginName)
	tbNewbeeMallUserUserIdKey := fmt.Sprintf("%s%v", cacheTbNewbeeMallUserUserIdPrefix, data.UserId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `user_id` = ?", m.table, tbNewbeeMallUserRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.NickName, newData.LoginName, newData.PasswordMd5, newData.IntroduceSign, newData.IsDeleted, newData.LockedFlag, newData.UserId)
	}, tbNewbeeMallUserLoginNameKey, tbNewbeeMallUserUserIdKey)
	return err
}

func (m *defaultTbNewbeeMallUserModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheTbNewbeeMallUserUserIdPrefix, primary)
}

func (m *defaultTbNewbeeMallUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", tbNewbeeMallUserRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTbNewbeeMallUserModel) tableName() string {
	return m.table
}
