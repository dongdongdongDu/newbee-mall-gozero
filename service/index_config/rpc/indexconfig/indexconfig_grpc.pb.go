// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: indexconfig.proto

package indexconfig

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IndexconfigClient is the client API for Indexconfig service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IndexconfigClient interface {
	GetConfigForIndex(ctx context.Context, in *GetConfigForIndexRequest, opts ...grpc.CallOption) (*GetConfigForIndexResponse, error)
	AddConfig(ctx context.Context, in *AddConfigRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	UpdateConfig(ctx context.Context, in *UpdateConfigRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	DeleteConfig(ctx context.Context, in *DeleteConfigRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error)
	GetConfigList(ctx context.Context, in *GetConfigListRequest, opts ...grpc.CallOption) (*GetConfigListResponse, error)
}

type indexconfigClient struct {
	cc grpc.ClientConnInterface
}

func NewIndexconfigClient(cc grpc.ClientConnInterface) IndexconfigClient {
	return &indexconfigClient{cc}
}

func (c *indexconfigClient) GetConfigForIndex(ctx context.Context, in *GetConfigForIndexRequest, opts ...grpc.CallOption) (*GetConfigForIndexResponse, error) {
	out := new(GetConfigForIndexResponse)
	err := c.cc.Invoke(ctx, "/indexconfig.indexconfig/getConfigForIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexconfigClient) AddConfig(ctx context.Context, in *AddConfigRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/indexconfig.indexconfig/addConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexconfigClient) UpdateConfig(ctx context.Context, in *UpdateConfigRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/indexconfig.indexconfig/updateConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexconfigClient) DeleteConfig(ctx context.Context, in *DeleteConfigRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/indexconfig.indexconfig/deleteConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexconfigClient) GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error) {
	out := new(GetConfigResponse)
	err := c.cc.Invoke(ctx, "/indexconfig.indexconfig/getConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexconfigClient) GetConfigList(ctx context.Context, in *GetConfigListRequest, opts ...grpc.CallOption) (*GetConfigListResponse, error) {
	out := new(GetConfigListResponse)
	err := c.cc.Invoke(ctx, "/indexconfig.indexconfig/getConfigList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IndexconfigServer is the server API for Indexconfig service.
// All implementations must embed UnimplementedIndexconfigServer
// for forward compatibility
type IndexconfigServer interface {
	GetConfigForIndex(context.Context, *GetConfigForIndexRequest) (*GetConfigForIndexResponse, error)
	AddConfig(context.Context, *AddConfigRequest) (*EmptyResponse, error)
	UpdateConfig(context.Context, *UpdateConfigRequest) (*EmptyResponse, error)
	DeleteConfig(context.Context, *DeleteConfigRequest) (*EmptyResponse, error)
	GetConfig(context.Context, *GetConfigRequest) (*GetConfigResponse, error)
	GetConfigList(context.Context, *GetConfigListRequest) (*GetConfigListResponse, error)
	mustEmbedUnimplementedIndexconfigServer()
}

// UnimplementedIndexconfigServer must be embedded to have forward compatible implementations.
type UnimplementedIndexconfigServer struct {
}

func (UnimplementedIndexconfigServer) GetConfigForIndex(context.Context, *GetConfigForIndexRequest) (*GetConfigForIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigForIndex not implemented")
}
func (UnimplementedIndexconfigServer) AddConfig(context.Context, *AddConfigRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddConfig not implemented")
}
func (UnimplementedIndexconfigServer) UpdateConfig(context.Context, *UpdateConfigRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfig not implemented")
}
func (UnimplementedIndexconfigServer) DeleteConfig(context.Context, *DeleteConfigRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConfig not implemented")
}
func (UnimplementedIndexconfigServer) GetConfig(context.Context, *GetConfigRequest) (*GetConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedIndexconfigServer) GetConfigList(context.Context, *GetConfigListRequest) (*GetConfigListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigList not implemented")
}
func (UnimplementedIndexconfigServer) mustEmbedUnimplementedIndexconfigServer() {}

// UnsafeIndexconfigServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IndexconfigServer will
// result in compilation errors.
type UnsafeIndexconfigServer interface {
	mustEmbedUnimplementedIndexconfigServer()
}

func RegisterIndexconfigServer(s grpc.ServiceRegistrar, srv IndexconfigServer) {
	s.RegisterService(&Indexconfig_ServiceDesc, srv)
}

func _Indexconfig_GetConfigForIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigForIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexconfigServer).GetConfigForIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indexconfig.indexconfig/getConfigForIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexconfigServer).GetConfigForIndex(ctx, req.(*GetConfigForIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexconfig_AddConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexconfigServer).AddConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indexconfig.indexconfig/addConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexconfigServer).AddConfig(ctx, req.(*AddConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexconfig_UpdateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexconfigServer).UpdateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indexconfig.indexconfig/updateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexconfigServer).UpdateConfig(ctx, req.(*UpdateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexconfig_DeleteConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexconfigServer).DeleteConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indexconfig.indexconfig/deleteConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexconfigServer).DeleteConfig(ctx, req.(*DeleteConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexconfig_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexconfigServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indexconfig.indexconfig/getConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexconfigServer).GetConfig(ctx, req.(*GetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexconfig_GetConfigList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexconfigServer).GetConfigList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indexconfig.indexconfig/getConfigList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexconfigServer).GetConfigList(ctx, req.(*GetConfigListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Indexconfig_ServiceDesc is the grpc.ServiceDesc for Indexconfig service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Indexconfig_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "indexconfig.indexconfig",
	HandlerType: (*IndexconfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getConfigForIndex",
			Handler:    _Indexconfig_GetConfigForIndex_Handler,
		},
		{
			MethodName: "addConfig",
			Handler:    _Indexconfig_AddConfig_Handler,
		},
		{
			MethodName: "updateConfig",
			Handler:    _Indexconfig_UpdateConfig_Handler,
		},
		{
			MethodName: "deleteConfig",
			Handler:    _Indexconfig_DeleteConfig_Handler,
		},
		{
			MethodName: "getConfig",
			Handler:    _Indexconfig_GetConfig_Handler,
		},
		{
			MethodName: "getConfigList",
			Handler:    _Indexconfig_GetConfigList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "indexconfig.proto",
}
