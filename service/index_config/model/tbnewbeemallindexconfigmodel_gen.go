// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tbNewbeeMallIndexConfigFieldNames          = builder.RawFieldNames(&TbNewbeeMallIndexConfig{})
	tbNewbeeMallIndexConfigRows                = strings.Join(tbNewbeeMallIndexConfigFieldNames, ",")
	tbNewbeeMallIndexConfigRowsExpectAutoSet   = strings.Join(stringx.Remove(tbNewbeeMallIndexConfigFieldNames, "`config_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	tbNewbeeMallIndexConfigRowsWithPlaceHolder = strings.Join(stringx.Remove(tbNewbeeMallIndexConfigFieldNames, "`config_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheTbNewbeeMallIndexConfigConfigIdPrefix = "cache:tbNewbeeMallIndexConfig:configId:"
)

type (
	tbNewbeeMallIndexConfigModel interface {
		Insert(ctx context.Context, data *TbNewbeeMallIndexConfig) (sql.Result, error)
		FindOne(ctx context.Context, configId int64) (*TbNewbeeMallIndexConfig, error)
		Update(ctx context.Context, data *TbNewbeeMallIndexConfig) error
		Delete(ctx context.Context, configId int64) error
	}

	defaultTbNewbeeMallIndexConfigModel struct {
		sqlc.CachedConn
		table string
	}

	TbNewbeeMallIndexConfig struct {
		ConfigId    int64     `db:"config_id"`    // 首页配置项主键id
		ConfigName  string    `db:"config_name"`  // 显示字符(配置搜索时不可为空，其他可为空)
		ConfigType  int64     `db:"config_type"`  // 1-搜索框热搜 2-搜索下拉框热搜 3-(首页)热销商品 4-(首页)新品上线 5-(首页)为你推荐
		GoodsId     int64     `db:"goods_id"`     // 商品id 默认为0
		RedirectUrl string    `db:"redirect_url"` // 点击后的跳转地址(默认不跳转)
		ConfigRank  int64     `db:"config_rank"`  // 排序值(字段越大越靠前)
		IsDeleted   int64     `db:"is_deleted"`   // 删除标识字段(0-未删除 1-已删除)
		CreateTime  time.Time `db:"create_time"`  // 创建时间
		CreateUser  int64     `db:"create_user"`  // 创建者id
		UpdateTime  time.Time `db:"update_time"`  // 最新修改时间
		UpdateUser  int64     `db:"update_user"`  // 修改者id
	}
)

func newTbNewbeeMallIndexConfigModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultTbNewbeeMallIndexConfigModel {
	return &defaultTbNewbeeMallIndexConfigModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`tb_newbee_mall_index_config`",
	}
}

func (m *defaultTbNewbeeMallIndexConfigModel) Delete(ctx context.Context, configId int64) error {
	tbNewbeeMallIndexConfigConfigIdKey := fmt.Sprintf("%s%v", cacheTbNewbeeMallIndexConfigConfigIdPrefix, configId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `config_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, configId)
	}, tbNewbeeMallIndexConfigConfigIdKey)
	return err
}

func (m *defaultTbNewbeeMallIndexConfigModel) FindOne(ctx context.Context, configId int64) (*TbNewbeeMallIndexConfig, error) {
	tbNewbeeMallIndexConfigConfigIdKey := fmt.Sprintf("%s%v", cacheTbNewbeeMallIndexConfigConfigIdPrefix, configId)
	var resp TbNewbeeMallIndexConfig
	err := m.QueryRowCtx(ctx, &resp, tbNewbeeMallIndexConfigConfigIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `config_id` = ? limit 1", tbNewbeeMallIndexConfigRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, configId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbNewbeeMallIndexConfigModel) Insert(ctx context.Context, data *TbNewbeeMallIndexConfig) (sql.Result, error) {
	tbNewbeeMallIndexConfigConfigIdKey := fmt.Sprintf("%s%v", cacheTbNewbeeMallIndexConfigConfigIdPrefix, data.ConfigId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, tbNewbeeMallIndexConfigRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ConfigName, data.ConfigType, data.GoodsId, data.RedirectUrl, data.ConfigRank, data.IsDeleted, data.CreateUser, data.UpdateUser)
	}, tbNewbeeMallIndexConfigConfigIdKey)
	return ret, err
}

func (m *defaultTbNewbeeMallIndexConfigModel) Update(ctx context.Context, data *TbNewbeeMallIndexConfig) error {
	tbNewbeeMallIndexConfigConfigIdKey := fmt.Sprintf("%s%v", cacheTbNewbeeMallIndexConfigConfigIdPrefix, data.ConfigId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `config_id` = ?", m.table, tbNewbeeMallIndexConfigRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ConfigName, data.ConfigType, data.GoodsId, data.RedirectUrl, data.ConfigRank, data.IsDeleted, data.CreateUser, data.UpdateUser, data.ConfigId)
	}, tbNewbeeMallIndexConfigConfigIdKey)
	return err
}

func (m *defaultTbNewbeeMallIndexConfigModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheTbNewbeeMallIndexConfigConfigIdPrefix, primary)
}

func (m *defaultTbNewbeeMallIndexConfigModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `config_id` = ? limit 1", tbNewbeeMallIndexConfigRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTbNewbeeMallIndexConfigModel) tableName() string {
	return m.table
}
