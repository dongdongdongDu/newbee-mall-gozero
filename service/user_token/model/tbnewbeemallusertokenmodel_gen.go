// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tbNewbeeMallUserTokenFieldNames          = builder.RawFieldNames(&TbNewbeeMallUserToken{})
	tbNewbeeMallUserTokenRows                = strings.Join(tbNewbeeMallUserTokenFieldNames, ",")
	tbNewbeeMallUserTokenRowsExpectAutoSet   = strings.Join(stringx.Remove(tbNewbeeMallUserTokenFieldNames, "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	tbNewbeeMallUserTokenRowsWithPlaceHolder = strings.Join(stringx.Remove(tbNewbeeMallUserTokenFieldNames, "`user_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheTbNewbeeMallUserTokenUserIdPrefix = "cache:tbNewbeeMallUserToken:userId:"
	cacheTbNewbeeMallUserTokenTokenPrefix  = "cache:tbNewbeeMallUserToken:token:"
)

type (
	tbNewbeeMallUserTokenModel interface {
		Insert(ctx context.Context, data *TbNewbeeMallUserToken) (sql.Result, error)
		FindOne(ctx context.Context, userId int64) (*TbNewbeeMallUserToken, error)
		FindOneByToken(ctx context.Context, token string) (*TbNewbeeMallUserToken, error)
		Update(ctx context.Context, data *TbNewbeeMallUserToken) error
		Delete(ctx context.Context, userId int64) error
	}

	defaultTbNewbeeMallUserTokenModel struct {
		sqlc.CachedConn
		table string
	}

	TbNewbeeMallUserToken struct {
		UserId     int64     `db:"user_id"`     // 用户主键id
		Token      string    `db:"token"`       // token值(32位字符串)
		UpdateTime time.Time `db:"update_time"` // 修改时间
		ExpireTime time.Time `db:"expire_time"` // token过期时间
	}
)

func newTbNewbeeMallUserTokenModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultTbNewbeeMallUserTokenModel {
	return &defaultTbNewbeeMallUserTokenModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`tb_newbee_mall_user_token`",
	}
}

func (m *defaultTbNewbeeMallUserTokenModel) Delete(ctx context.Context, userId int64) error {
	data, err := m.FindOne(ctx, userId)
	if err != nil {
		return err
	}

	tbNewbeeMallUserTokenTokenKey := fmt.Sprintf("%s%v", cacheTbNewbeeMallUserTokenTokenPrefix, data.Token)
	tbNewbeeMallUserTokenUserIdKey := fmt.Sprintf("%s%v", cacheTbNewbeeMallUserTokenUserIdPrefix, userId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `user_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, userId)
	}, tbNewbeeMallUserTokenTokenKey, tbNewbeeMallUserTokenUserIdKey)
	return err
}

func (m *defaultTbNewbeeMallUserTokenModel) FindOne(ctx context.Context, userId int64) (*TbNewbeeMallUserToken, error) {
	tbNewbeeMallUserTokenUserIdKey := fmt.Sprintf("%s%v", cacheTbNewbeeMallUserTokenUserIdPrefix, userId)
	var resp TbNewbeeMallUserToken
	err := m.QueryRowCtx(ctx, &resp, tbNewbeeMallUserTokenUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", tbNewbeeMallUserTokenRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, userId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbNewbeeMallUserTokenModel) FindOneByToken(ctx context.Context, token string) (*TbNewbeeMallUserToken, error) {
	tbNewbeeMallUserTokenTokenKey := fmt.Sprintf("%s%v", cacheTbNewbeeMallUserTokenTokenPrefix, token)
	var resp TbNewbeeMallUserToken
	err := m.QueryRowIndexCtx(ctx, &resp, tbNewbeeMallUserTokenTokenKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `token` = ? limit 1", tbNewbeeMallUserTokenRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, token); err != nil {
			return nil, err
		}
		return resp.UserId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbNewbeeMallUserTokenModel) Insert(ctx context.Context, data *TbNewbeeMallUserToken) (sql.Result, error) {
	tbNewbeeMallUserTokenTokenKey := fmt.Sprintf("%s%v", cacheTbNewbeeMallUserTokenTokenPrefix, data.Token)
	tbNewbeeMallUserTokenUserIdKey := fmt.Sprintf("%s%v", cacheTbNewbeeMallUserTokenUserIdPrefix, data.UserId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, tbNewbeeMallUserTokenRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.Token, data.ExpireTime)
	}, tbNewbeeMallUserTokenTokenKey, tbNewbeeMallUserTokenUserIdKey)
	return ret, err
}

func (m *defaultTbNewbeeMallUserTokenModel) Update(ctx context.Context, newData *TbNewbeeMallUserToken) error {
	data, err := m.FindOne(ctx, newData.UserId)
	if err != nil {
		return err
	}

	tbNewbeeMallUserTokenTokenKey := fmt.Sprintf("%s%v", cacheTbNewbeeMallUserTokenTokenPrefix, data.Token)
	tbNewbeeMallUserTokenUserIdKey := fmt.Sprintf("%s%v", cacheTbNewbeeMallUserTokenUserIdPrefix, data.UserId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `user_id` = ?", m.table, tbNewbeeMallUserTokenRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Token, newData.ExpireTime, newData.UserId)
	}, tbNewbeeMallUserTokenTokenKey, tbNewbeeMallUserTokenUserIdKey)
	return err
}

func (m *defaultTbNewbeeMallUserTokenModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheTbNewbeeMallUserTokenUserIdPrefix, primary)
}

func (m *defaultTbNewbeeMallUserTokenModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", tbNewbeeMallUserTokenRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTbNewbeeMallUserTokenModel) tableName() string {
	return m.table
}
