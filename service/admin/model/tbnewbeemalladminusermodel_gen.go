// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tbNewbeeMallAdminUserFieldNames          = builder.RawFieldNames(&TbNewbeeMallAdminUser{})
	tbNewbeeMallAdminUserRows                = strings.Join(tbNewbeeMallAdminUserFieldNames, ",")
	tbNewbeeMallAdminUserRowsExpectAutoSet   = strings.Join(stringx.Remove(tbNewbeeMallAdminUserFieldNames, "`admin_user_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	tbNewbeeMallAdminUserRowsWithPlaceHolder = strings.Join(stringx.Remove(tbNewbeeMallAdminUserFieldNames, "`admin_user_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheTbNewbeeMallAdminUserAdminUserIdPrefix   = "cache:tbNewbeeMallAdminUser:adminUserId:"
	cacheTbNewbeeMallAdminUserLoginUserNamePrefix = "cache:tbNewbeeMallAdminUser:loginUserName:"
)

type (
	tbNewbeeMallAdminUserModel interface {
		Insert(ctx context.Context, data *TbNewbeeMallAdminUser) (sql.Result, error)
		FindOne(ctx context.Context, adminUserId int64) (*TbNewbeeMallAdminUser, error)
		FindOneByLoginUserName(ctx context.Context, loginUserName string) (*TbNewbeeMallAdminUser, error)
		Update(ctx context.Context, data *TbNewbeeMallAdminUser) error
		Delete(ctx context.Context, adminUserId int64) error
	}

	defaultTbNewbeeMallAdminUserModel struct {
		sqlc.CachedConn
		table string
	}

	TbNewbeeMallAdminUser struct {
		AdminUserId   int64  `db:"admin_user_id"`   // 管理员id
		LoginUserName string `db:"login_user_name"` // 管理员登陆名称
		LoginPassword string `db:"login_password"`  // 管理员登陆密码
		NickName      string `db:"nick_name"`       // 管理员显示昵称
		Locked        int64  `db:"locked"`          // 是否锁定 0未锁定 1已锁定无法登陆
	}
)

func newTbNewbeeMallAdminUserModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultTbNewbeeMallAdminUserModel {
	return &defaultTbNewbeeMallAdminUserModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`tb_newbee_mall_admin_user`",
	}
}

func (m *defaultTbNewbeeMallAdminUserModel) Delete(ctx context.Context, adminUserId int64) error {
	data, err := m.FindOne(ctx, adminUserId)
	if err != nil {
		return err
	}

	tbNewbeeMallAdminUserAdminUserIdKey := fmt.Sprintf("%s%v", cacheTbNewbeeMallAdminUserAdminUserIdPrefix, adminUserId)
	tbNewbeeMallAdminUserLoginUserNameKey := fmt.Sprintf("%s%v", cacheTbNewbeeMallAdminUserLoginUserNamePrefix, data.LoginUserName)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `admin_user_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, adminUserId)
	}, tbNewbeeMallAdminUserAdminUserIdKey, tbNewbeeMallAdminUserLoginUserNameKey)
	return err
}

func (m *defaultTbNewbeeMallAdminUserModel) FindOne(ctx context.Context, adminUserId int64) (*TbNewbeeMallAdminUser, error) {
	tbNewbeeMallAdminUserAdminUserIdKey := fmt.Sprintf("%s%v", cacheTbNewbeeMallAdminUserAdminUserIdPrefix, adminUserId)
	var resp TbNewbeeMallAdminUser
	err := m.QueryRowCtx(ctx, &resp, tbNewbeeMallAdminUserAdminUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `admin_user_id` = ? limit 1", tbNewbeeMallAdminUserRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, adminUserId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbNewbeeMallAdminUserModel) FindOneByLoginUserName(ctx context.Context, loginUserName string) (*TbNewbeeMallAdminUser, error) {
	tbNewbeeMallAdminUserLoginUserNameKey := fmt.Sprintf("%s%v", cacheTbNewbeeMallAdminUserLoginUserNamePrefix, loginUserName)
	var resp TbNewbeeMallAdminUser
	err := m.QueryRowIndexCtx(ctx, &resp, tbNewbeeMallAdminUserLoginUserNameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `login_user_name` = ? limit 1", tbNewbeeMallAdminUserRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, loginUserName); err != nil {
			return nil, err
		}
		return resp.AdminUserId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbNewbeeMallAdminUserModel) Insert(ctx context.Context, data *TbNewbeeMallAdminUser) (sql.Result, error) {
	tbNewbeeMallAdminUserAdminUserIdKey := fmt.Sprintf("%s%v", cacheTbNewbeeMallAdminUserAdminUserIdPrefix, data.AdminUserId)
	tbNewbeeMallAdminUserLoginUserNameKey := fmt.Sprintf("%s%v", cacheTbNewbeeMallAdminUserLoginUserNamePrefix, data.LoginUserName)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, tbNewbeeMallAdminUserRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.LoginUserName, data.LoginPassword, data.NickName, data.Locked)
	}, tbNewbeeMallAdminUserAdminUserIdKey, tbNewbeeMallAdminUserLoginUserNameKey)
	return ret, err
}

func (m *defaultTbNewbeeMallAdminUserModel) Update(ctx context.Context, newData *TbNewbeeMallAdminUser) error {
	data, err := m.FindOne(ctx, newData.AdminUserId)
	if err != nil {
		return err
	}

	tbNewbeeMallAdminUserAdminUserIdKey := fmt.Sprintf("%s%v", cacheTbNewbeeMallAdminUserAdminUserIdPrefix, data.AdminUserId)
	tbNewbeeMallAdminUserLoginUserNameKey := fmt.Sprintf("%s%v", cacheTbNewbeeMallAdminUserLoginUserNamePrefix, data.LoginUserName)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `admin_user_id` = ?", m.table, tbNewbeeMallAdminUserRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.LoginUserName, newData.LoginPassword, newData.NickName, newData.Locked, newData.AdminUserId)
	}, tbNewbeeMallAdminUserAdminUserIdKey, tbNewbeeMallAdminUserLoginUserNameKey)
	return err
}

func (m *defaultTbNewbeeMallAdminUserModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheTbNewbeeMallAdminUserAdminUserIdPrefix, primary)
}

func (m *defaultTbNewbeeMallAdminUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `admin_user_id` = ? limit 1", tbNewbeeMallAdminUserRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTbNewbeeMallAdminUserModel) tableName() string {
	return m.table
}
