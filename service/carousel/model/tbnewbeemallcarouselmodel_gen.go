// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tbNewbeeMallCarouselFieldNames          = builder.RawFieldNames(&TbNewbeeMallCarousel{})
	tbNewbeeMallCarouselRows                = strings.Join(tbNewbeeMallCarouselFieldNames, ",")
	tbNewbeeMallCarouselRowsExpectAutoSet   = strings.Join(stringx.Remove(tbNewbeeMallCarouselFieldNames, "`carousel_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	tbNewbeeMallCarouselRowsWithPlaceHolder = strings.Join(stringx.Remove(tbNewbeeMallCarouselFieldNames, "`carousel_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheTbNewbeeMallCarouselCarouselIdPrefix = "cache:tbNewbeeMallCarousel:carouselId:"
)

type (
	tbNewbeeMallCarouselModel interface {
		Insert(ctx context.Context, data *TbNewbeeMallCarousel) (sql.Result, error)
		FindOne(ctx context.Context, carouselId int64) (*TbNewbeeMallCarousel, error)
		Update(ctx context.Context, data *TbNewbeeMallCarousel) error
		Delete(ctx context.Context, carouselId int64) error
	}

	defaultTbNewbeeMallCarouselModel struct {
		sqlc.CachedConn
		table string
	}

	TbNewbeeMallCarousel struct {
		CarouselId   int64     `db:"carousel_id"`   // 首页轮播图主键id
		CarouselUrl  string    `db:"carousel_url"`  // 轮播图
		RedirectUrl  string    `db:"redirect_url"`  // 点击后的跳转地址(默认不跳转)
		CarouselRank int64     `db:"carousel_rank"` // 排序值(字段越大越靠前)
		IsDeleted    int64     `db:"is_deleted"`    // 删除标识字段(0-未删除 1-已删除)
		CreateTime   time.Time `db:"create_time"`   // 创建时间
		CreateUser   int64     `db:"create_user"`   // 创建者id
		UpdateTime   time.Time `db:"update_time"`   // 修改时间
		UpdateUser   int64     `db:"update_user"`   // 修改者id
	}
)

func newTbNewbeeMallCarouselModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultTbNewbeeMallCarouselModel {
	return &defaultTbNewbeeMallCarouselModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`tb_newbee_mall_carousel`",
	}
}

func (m *defaultTbNewbeeMallCarouselModel) Delete(ctx context.Context, carouselId int64) error {
	tbNewbeeMallCarouselCarouselIdKey := fmt.Sprintf("%s%v", cacheTbNewbeeMallCarouselCarouselIdPrefix, carouselId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `carousel_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, carouselId)
	}, tbNewbeeMallCarouselCarouselIdKey)
	return err
}

func (m *defaultTbNewbeeMallCarouselModel) FindOne(ctx context.Context, carouselId int64) (*TbNewbeeMallCarousel, error) {
	tbNewbeeMallCarouselCarouselIdKey := fmt.Sprintf("%s%v", cacheTbNewbeeMallCarouselCarouselIdPrefix, carouselId)
	var resp TbNewbeeMallCarousel
	err := m.QueryRowCtx(ctx, &resp, tbNewbeeMallCarouselCarouselIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `carousel_id` = ? limit 1", tbNewbeeMallCarouselRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, carouselId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbNewbeeMallCarouselModel) Insert(ctx context.Context, data *TbNewbeeMallCarousel) (sql.Result, error) {
	tbNewbeeMallCarouselCarouselIdKey := fmt.Sprintf("%s%v", cacheTbNewbeeMallCarouselCarouselIdPrefix, data.CarouselId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, tbNewbeeMallCarouselRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.CarouselUrl, data.RedirectUrl, data.CarouselRank, data.IsDeleted, data.CreateUser, data.UpdateUser)
	}, tbNewbeeMallCarouselCarouselIdKey)
	return ret, err
}

func (m *defaultTbNewbeeMallCarouselModel) Update(ctx context.Context, data *TbNewbeeMallCarousel) error {
	tbNewbeeMallCarouselCarouselIdKey := fmt.Sprintf("%s%v", cacheTbNewbeeMallCarouselCarouselIdPrefix, data.CarouselId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `carousel_id` = ?", m.table, tbNewbeeMallCarouselRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.CarouselUrl, data.RedirectUrl, data.CarouselRank, data.IsDeleted, data.CreateUser, data.UpdateUser, data.CarouselId)
	}, tbNewbeeMallCarouselCarouselIdKey)
	return err
}

func (m *defaultTbNewbeeMallCarouselModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheTbNewbeeMallCarouselCarouselIdPrefix, primary)
}

func (m *defaultTbNewbeeMallCarouselModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `carousel_id` = ? limit 1", tbNewbeeMallCarouselRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTbNewbeeMallCarouselModel) tableName() string {
	return m.table
}
