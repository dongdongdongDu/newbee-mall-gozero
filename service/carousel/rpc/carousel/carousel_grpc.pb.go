// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: carousel.proto

package carousel

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CarouselClient is the client API for Carousel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CarouselClient interface {
	GetCarouselsForIndex(ctx context.Context, in *GetCarouselsForIndexRequest, opts ...grpc.CallOption) (*GetCarouselsForIndexResponse, error)
	AddCarousel(ctx context.Context, in *AddCarouselRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	UpdateCarousel(ctx context.Context, in *UpdateCarouselRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	DeleteCarousel(ctx context.Context, in *DeleteCarouselRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	GetCarousel(ctx context.Context, in *GetCarouselRequest, opts ...grpc.CallOption) (*GetCarouselResponse, error)
	GetCarouselList(ctx context.Context, in *GetCarouselListRequest, opts ...grpc.CallOption) (*GetCarouselListResponse, error)
}

type carouselClient struct {
	cc grpc.ClientConnInterface
}

func NewCarouselClient(cc grpc.ClientConnInterface) CarouselClient {
	return &carouselClient{cc}
}

func (c *carouselClient) GetCarouselsForIndex(ctx context.Context, in *GetCarouselsForIndexRequest, opts ...grpc.CallOption) (*GetCarouselsForIndexResponse, error) {
	out := new(GetCarouselsForIndexResponse)
	err := c.cc.Invoke(ctx, "/carousel.carousel/getCarouselsForIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carouselClient) AddCarousel(ctx context.Context, in *AddCarouselRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/carousel.carousel/addCarousel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carouselClient) UpdateCarousel(ctx context.Context, in *UpdateCarouselRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/carousel.carousel/updateCarousel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carouselClient) DeleteCarousel(ctx context.Context, in *DeleteCarouselRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/carousel.carousel/deleteCarousel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carouselClient) GetCarousel(ctx context.Context, in *GetCarouselRequest, opts ...grpc.CallOption) (*GetCarouselResponse, error) {
	out := new(GetCarouselResponse)
	err := c.cc.Invoke(ctx, "/carousel.carousel/getCarousel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carouselClient) GetCarouselList(ctx context.Context, in *GetCarouselListRequest, opts ...grpc.CallOption) (*GetCarouselListResponse, error) {
	out := new(GetCarouselListResponse)
	err := c.cc.Invoke(ctx, "/carousel.carousel/getCarouselList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CarouselServer is the server API for Carousel service.
// All implementations must embed UnimplementedCarouselServer
// for forward compatibility
type CarouselServer interface {
	GetCarouselsForIndex(context.Context, *GetCarouselsForIndexRequest) (*GetCarouselsForIndexResponse, error)
	AddCarousel(context.Context, *AddCarouselRequest) (*EmptyResponse, error)
	UpdateCarousel(context.Context, *UpdateCarouselRequest) (*EmptyResponse, error)
	DeleteCarousel(context.Context, *DeleteCarouselRequest) (*EmptyResponse, error)
	GetCarousel(context.Context, *GetCarouselRequest) (*GetCarouselResponse, error)
	GetCarouselList(context.Context, *GetCarouselListRequest) (*GetCarouselListResponse, error)
	mustEmbedUnimplementedCarouselServer()
}

// UnimplementedCarouselServer must be embedded to have forward compatible implementations.
type UnimplementedCarouselServer struct {
}

func (UnimplementedCarouselServer) GetCarouselsForIndex(context.Context, *GetCarouselsForIndexRequest) (*GetCarouselsForIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCarouselsForIndex not implemented")
}
func (UnimplementedCarouselServer) AddCarousel(context.Context, *AddCarouselRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCarousel not implemented")
}
func (UnimplementedCarouselServer) UpdateCarousel(context.Context, *UpdateCarouselRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCarousel not implemented")
}
func (UnimplementedCarouselServer) DeleteCarousel(context.Context, *DeleteCarouselRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCarousel not implemented")
}
func (UnimplementedCarouselServer) GetCarousel(context.Context, *GetCarouselRequest) (*GetCarouselResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCarousel not implemented")
}
func (UnimplementedCarouselServer) GetCarouselList(context.Context, *GetCarouselListRequest) (*GetCarouselListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCarouselList not implemented")
}
func (UnimplementedCarouselServer) mustEmbedUnimplementedCarouselServer() {}

// UnsafeCarouselServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CarouselServer will
// result in compilation errors.
type UnsafeCarouselServer interface {
	mustEmbedUnimplementedCarouselServer()
}

func RegisterCarouselServer(s grpc.ServiceRegistrar, srv CarouselServer) {
	s.RegisterService(&Carousel_ServiceDesc, srv)
}

func _Carousel_GetCarouselsForIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCarouselsForIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarouselServer).GetCarouselsForIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carousel.carousel/getCarouselsForIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarouselServer).GetCarouselsForIndex(ctx, req.(*GetCarouselsForIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Carousel_AddCarousel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCarouselRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarouselServer).AddCarousel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carousel.carousel/addCarousel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarouselServer).AddCarousel(ctx, req.(*AddCarouselRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Carousel_UpdateCarousel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCarouselRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarouselServer).UpdateCarousel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carousel.carousel/updateCarousel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarouselServer).UpdateCarousel(ctx, req.(*UpdateCarouselRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Carousel_DeleteCarousel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCarouselRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarouselServer).DeleteCarousel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carousel.carousel/deleteCarousel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarouselServer).DeleteCarousel(ctx, req.(*DeleteCarouselRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Carousel_GetCarousel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCarouselRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarouselServer).GetCarousel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carousel.carousel/getCarousel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarouselServer).GetCarousel(ctx, req.(*GetCarouselRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Carousel_GetCarouselList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCarouselListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarouselServer).GetCarouselList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carousel.carousel/getCarouselList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarouselServer).GetCarouselList(ctx, req.(*GetCarouselListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Carousel_ServiceDesc is the grpc.ServiceDesc for Carousel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Carousel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "carousel.carousel",
	HandlerType: (*CarouselServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getCarouselsForIndex",
			Handler:    _Carousel_GetCarouselsForIndex_Handler,
		},
		{
			MethodName: "addCarousel",
			Handler:    _Carousel_AddCarousel_Handler,
		},
		{
			MethodName: "updateCarousel",
			Handler:    _Carousel_UpdateCarousel_Handler,
		},
		{
			MethodName: "deleteCarousel",
			Handler:    _Carousel_DeleteCarousel_Handler,
		},
		{
			MethodName: "getCarousel",
			Handler:    _Carousel_GetCarousel_Handler,
		},
		{
			MethodName: "getCarouselList",
			Handler:    _Carousel_GetCarouselList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "carousel.proto",
}
