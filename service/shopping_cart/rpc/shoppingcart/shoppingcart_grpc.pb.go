// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: shoppingcart.proto

package shoppingcart

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShoppingcartClient is the client API for Shoppingcart service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShoppingcartClient interface {
	AddCartItem(ctx context.Context, in *AddCartItemRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	UpdateCartItem(ctx context.Context, in *UpdateCartItemRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	DeleteCartItem(ctx context.Context, in *DeleteCartItemRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	GetCartList(ctx context.Context, in *GetCartListRequest, opts ...grpc.CallOption) (*GetCartListResponse, error)
	GetCartItems(ctx context.Context, in *GetCartItemsRequest, opts ...grpc.CallOption) (*GetCartItemsResponse, error)
}

type shoppingcartClient struct {
	cc grpc.ClientConnInterface
}

func NewShoppingcartClient(cc grpc.ClientConnInterface) ShoppingcartClient {
	return &shoppingcartClient{cc}
}

func (c *shoppingcartClient) AddCartItem(ctx context.Context, in *AddCartItemRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/shoppingcart.shoppingcart/addCartItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingcartClient) UpdateCartItem(ctx context.Context, in *UpdateCartItemRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/shoppingcart.shoppingcart/updateCartItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingcartClient) DeleteCartItem(ctx context.Context, in *DeleteCartItemRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/shoppingcart.shoppingcart/deleteCartItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingcartClient) GetCartList(ctx context.Context, in *GetCartListRequest, opts ...grpc.CallOption) (*GetCartListResponse, error) {
	out := new(GetCartListResponse)
	err := c.cc.Invoke(ctx, "/shoppingcart.shoppingcart/getCartList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingcartClient) GetCartItems(ctx context.Context, in *GetCartItemsRequest, opts ...grpc.CallOption) (*GetCartItemsResponse, error) {
	out := new(GetCartItemsResponse)
	err := c.cc.Invoke(ctx, "/shoppingcart.shoppingcart/getCartItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShoppingcartServer is the server API for Shoppingcart service.
// All implementations must embed UnimplementedShoppingcartServer
// for forward compatibility
type ShoppingcartServer interface {
	AddCartItem(context.Context, *AddCartItemRequest) (*EmptyResponse, error)
	UpdateCartItem(context.Context, *UpdateCartItemRequest) (*EmptyResponse, error)
	DeleteCartItem(context.Context, *DeleteCartItemRequest) (*EmptyResponse, error)
	GetCartList(context.Context, *GetCartListRequest) (*GetCartListResponse, error)
	GetCartItems(context.Context, *GetCartItemsRequest) (*GetCartItemsResponse, error)
	mustEmbedUnimplementedShoppingcartServer()
}

// UnimplementedShoppingcartServer must be embedded to have forward compatible implementations.
type UnimplementedShoppingcartServer struct {
}

func (UnimplementedShoppingcartServer) AddCartItem(context.Context, *AddCartItemRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCartItem not implemented")
}
func (UnimplementedShoppingcartServer) UpdateCartItem(context.Context, *UpdateCartItemRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCartItem not implemented")
}
func (UnimplementedShoppingcartServer) DeleteCartItem(context.Context, *DeleteCartItemRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCartItem not implemented")
}
func (UnimplementedShoppingcartServer) GetCartList(context.Context, *GetCartListRequest) (*GetCartListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCartList not implemented")
}
func (UnimplementedShoppingcartServer) GetCartItems(context.Context, *GetCartItemsRequest) (*GetCartItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCartItems not implemented")
}
func (UnimplementedShoppingcartServer) mustEmbedUnimplementedShoppingcartServer() {}

// UnsafeShoppingcartServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShoppingcartServer will
// result in compilation errors.
type UnsafeShoppingcartServer interface {
	mustEmbedUnimplementedShoppingcartServer()
}

func RegisterShoppingcartServer(s grpc.ServiceRegistrar, srv ShoppingcartServer) {
	s.RegisterService(&Shoppingcart_ServiceDesc, srv)
}

func _Shoppingcart_AddCartItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCartItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingcartServer).AddCartItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shoppingcart.shoppingcart/addCartItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingcartServer).AddCartItem(ctx, req.(*AddCartItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shoppingcart_UpdateCartItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCartItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingcartServer).UpdateCartItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shoppingcart.shoppingcart/updateCartItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingcartServer).UpdateCartItem(ctx, req.(*UpdateCartItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shoppingcart_DeleteCartItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCartItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingcartServer).DeleteCartItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shoppingcart.shoppingcart/deleteCartItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingcartServer).DeleteCartItem(ctx, req.(*DeleteCartItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shoppingcart_GetCartList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCartListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingcartServer).GetCartList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shoppingcart.shoppingcart/getCartList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingcartServer).GetCartList(ctx, req.(*GetCartListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shoppingcart_GetCartItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCartItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingcartServer).GetCartItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shoppingcart.shoppingcart/getCartItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingcartServer).GetCartItems(ctx, req.(*GetCartItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Shoppingcart_ServiceDesc is the grpc.ServiceDesc for Shoppingcart service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shoppingcart_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shoppingcart.shoppingcart",
	HandlerType: (*ShoppingcartServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addCartItem",
			Handler:    _Shoppingcart_AddCartItem_Handler,
		},
		{
			MethodName: "updateCartItem",
			Handler:    _Shoppingcart_UpdateCartItem_Handler,
		},
		{
			MethodName: "deleteCartItem",
			Handler:    _Shoppingcart_DeleteCartItem_Handler,
		},
		{
			MethodName: "getCartList",
			Handler:    _Shoppingcart_GetCartList_Handler,
		},
		{
			MethodName: "getCartItems",
			Handler:    _Shoppingcart_GetCartItems_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shoppingcart.proto",
}
