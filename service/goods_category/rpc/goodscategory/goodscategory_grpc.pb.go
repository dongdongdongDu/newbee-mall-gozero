// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: goodscategory.proto

package goodscategory

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoodscategoryClient is the client API for Goodscategory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoodscategoryClient interface {
	AddCategory(ctx context.Context, in *AddCategoryRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	GetCategory(ctx context.Context, in *GetCategoryRequest, opts ...grpc.CallOption) (*GetCategoryResponse, error)
	GetCategoryList(ctx context.Context, in *GetCategoryListRequest, opts ...grpc.CallOption) (*GetCategoryListResponse, error)
	GetCategoryByParent(ctx context.Context, in *GetCategoryByParentRequest, opts ...grpc.CallOption) (*GetCategoryByParentResponse, error)
	DeleteCategory(ctx context.Context, in *DeleteCategoryRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type goodscategoryClient struct {
	cc grpc.ClientConnInterface
}

func NewGoodscategoryClient(cc grpc.ClientConnInterface) GoodscategoryClient {
	return &goodscategoryClient{cc}
}

func (c *goodscategoryClient) AddCategory(ctx context.Context, in *AddCategoryRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/goodscategory.goodscategory/addCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodscategoryClient) UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/goodscategory.goodscategory/updateCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodscategoryClient) GetCategory(ctx context.Context, in *GetCategoryRequest, opts ...grpc.CallOption) (*GetCategoryResponse, error) {
	out := new(GetCategoryResponse)
	err := c.cc.Invoke(ctx, "/goodscategory.goodscategory/getCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodscategoryClient) GetCategoryList(ctx context.Context, in *GetCategoryListRequest, opts ...grpc.CallOption) (*GetCategoryListResponse, error) {
	out := new(GetCategoryListResponse)
	err := c.cc.Invoke(ctx, "/goodscategory.goodscategory/getCategoryList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodscategoryClient) GetCategoryByParent(ctx context.Context, in *GetCategoryByParentRequest, opts ...grpc.CallOption) (*GetCategoryByParentResponse, error) {
	out := new(GetCategoryByParentResponse)
	err := c.cc.Invoke(ctx, "/goodscategory.goodscategory/getCategoryByParent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodscategoryClient) DeleteCategory(ctx context.Context, in *DeleteCategoryRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/goodscategory.goodscategory/deleteCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoodscategoryServer is the server API for Goodscategory service.
// All implementations must embed UnimplementedGoodscategoryServer
// for forward compatibility
type GoodscategoryServer interface {
	AddCategory(context.Context, *AddCategoryRequest) (*EmptyResponse, error)
	UpdateCategory(context.Context, *UpdateCategoryRequest) (*EmptyResponse, error)
	GetCategory(context.Context, *GetCategoryRequest) (*GetCategoryResponse, error)
	GetCategoryList(context.Context, *GetCategoryListRequest) (*GetCategoryListResponse, error)
	GetCategoryByParent(context.Context, *GetCategoryByParentRequest) (*GetCategoryByParentResponse, error)
	DeleteCategory(context.Context, *DeleteCategoryRequest) (*EmptyResponse, error)
	mustEmbedUnimplementedGoodscategoryServer()
}

// UnimplementedGoodscategoryServer must be embedded to have forward compatible implementations.
type UnimplementedGoodscategoryServer struct {
}

func (UnimplementedGoodscategoryServer) AddCategory(context.Context, *AddCategoryRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCategory not implemented")
}
func (UnimplementedGoodscategoryServer) UpdateCategory(context.Context, *UpdateCategoryRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategory not implemented")
}
func (UnimplementedGoodscategoryServer) GetCategory(context.Context, *GetCategoryRequest) (*GetCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategory not implemented")
}
func (UnimplementedGoodscategoryServer) GetCategoryList(context.Context, *GetCategoryListRequest) (*GetCategoryListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryList not implemented")
}
func (UnimplementedGoodscategoryServer) GetCategoryByParent(context.Context, *GetCategoryByParentRequest) (*GetCategoryByParentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryByParent not implemented")
}
func (UnimplementedGoodscategoryServer) DeleteCategory(context.Context, *DeleteCategoryRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategory not implemented")
}
func (UnimplementedGoodscategoryServer) mustEmbedUnimplementedGoodscategoryServer() {}

// UnsafeGoodscategoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoodscategoryServer will
// result in compilation errors.
type UnsafeGoodscategoryServer interface {
	mustEmbedUnimplementedGoodscategoryServer()
}

func RegisterGoodscategoryServer(s grpc.ServiceRegistrar, srv GoodscategoryServer) {
	s.RegisterService(&Goodscategory_ServiceDesc, srv)
}

func _Goodscategory_AddCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodscategoryServer).AddCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goodscategory.goodscategory/addCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodscategoryServer).AddCategory(ctx, req.(*AddCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goodscategory_UpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodscategoryServer).UpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goodscategory.goodscategory/updateCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodscategoryServer).UpdateCategory(ctx, req.(*UpdateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goodscategory_GetCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodscategoryServer).GetCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goodscategory.goodscategory/getCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodscategoryServer).GetCategory(ctx, req.(*GetCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goodscategory_GetCategoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodscategoryServer).GetCategoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goodscategory.goodscategory/getCategoryList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodscategoryServer).GetCategoryList(ctx, req.(*GetCategoryListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goodscategory_GetCategoryByParent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryByParentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodscategoryServer).GetCategoryByParent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goodscategory.goodscategory/getCategoryByParent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodscategoryServer).GetCategoryByParent(ctx, req.(*GetCategoryByParentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goodscategory_DeleteCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodscategoryServer).DeleteCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goodscategory.goodscategory/deleteCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodscategoryServer).DeleteCategory(ctx, req.(*DeleteCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Goodscategory_ServiceDesc is the grpc.ServiceDesc for Goodscategory service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Goodscategory_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goodscategory.goodscategory",
	HandlerType: (*GoodscategoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addCategory",
			Handler:    _Goodscategory_AddCategory_Handler,
		},
		{
			MethodName: "updateCategory",
			Handler:    _Goodscategory_UpdateCategory_Handler,
		},
		{
			MethodName: "getCategory",
			Handler:    _Goodscategory_GetCategory_Handler,
		},
		{
			MethodName: "getCategoryList",
			Handler:    _Goodscategory_GetCategoryList_Handler,
		},
		{
			MethodName: "getCategoryByParent",
			Handler:    _Goodscategory_GetCategoryByParent_Handler,
		},
		{
			MethodName: "deleteCategory",
			Handler:    _Goodscategory_DeleteCategory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goodscategory.proto",
}
