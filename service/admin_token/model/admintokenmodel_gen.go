// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	adminTokenFieldNames          = builder.RawFieldNames(&AdminToken{})
	adminTokenRows                = strings.Join(adminTokenFieldNames, ",")
	adminTokenRowsExpectAutoSet   = strings.Join(stringx.Remove(adminTokenFieldNames, "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	adminTokenRowsWithPlaceHolder = strings.Join(stringx.Remove(adminTokenFieldNames, "`admin_user_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheAdminTokenAdminUserIdPrefix = "cache:adminToken:adminUserId:"
	cacheAdminTokenTokenPrefix       = "cache:adminToken:token:"
)

type (
	adminTokenModel interface {
		Insert(ctx context.Context, data *AdminToken) (sql.Result, error)
		FindOne(ctx context.Context, adminUserId int64) (*AdminToken, error)
		FindOneByToken(ctx context.Context, token string) (*AdminToken, error)
		Update(ctx context.Context, data *AdminToken) error
		Delete(ctx context.Context, adminUserId int64) error
	}

	defaultAdminTokenModel struct {
		sqlc.CachedConn
		table string
	}

	AdminToken struct {
		AdminUserId int64     `db:"admin_user_id"` // 用户主键id
		Token       string    `db:"token"`         // token值(32位字符串)
		UpdateTime  time.Time `db:"update_time"`   // 修改时间
		ExpireTime  time.Time `db:"expire_time"`   // token过期时间
	}
)

func newAdminTokenModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAdminTokenModel {
	return &defaultAdminTokenModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`admin_token`",
	}
}

func (m *defaultAdminTokenModel) Delete(ctx context.Context, adminUserId int64) error {
	data, err := m.FindOne(ctx, adminUserId)
	if err != nil {
		return err
	}

	adminTokenAdminUserIdKey := fmt.Sprintf("%s%v", cacheAdminTokenAdminUserIdPrefix, adminUserId)
	adminTokenTokenKey := fmt.Sprintf("%s%v", cacheAdminTokenTokenPrefix, data.Token)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `admin_user_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, adminUserId)
	}, adminTokenAdminUserIdKey, adminTokenTokenKey)
	return err
}

func (m *defaultAdminTokenModel) FindOne(ctx context.Context, adminUserId int64) (*AdminToken, error) {
	adminTokenAdminUserIdKey := fmt.Sprintf("%s%v", cacheAdminTokenAdminUserIdPrefix, adminUserId)
	var resp AdminToken
	err := m.QueryRowCtx(ctx, &resp, adminTokenAdminUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `admin_user_id` = ? limit 1", adminTokenRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, adminUserId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAdminTokenModel) FindOneByToken(ctx context.Context, token string) (*AdminToken, error) {
	adminTokenTokenKey := fmt.Sprintf("%s%v", cacheAdminTokenTokenPrefix, token)
	var resp AdminToken
	err := m.QueryRowIndexCtx(ctx, &resp, adminTokenTokenKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `token` = ? limit 1", adminTokenRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, token); err != nil {
			return nil, err
		}
		return resp.AdminUserId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAdminTokenModel) Insert(ctx context.Context, data *AdminToken) (sql.Result, error) {
	adminTokenAdminUserIdKey := fmt.Sprintf("%s%v", cacheAdminTokenAdminUserIdPrefix, data.AdminUserId)
	adminTokenTokenKey := fmt.Sprintf("%s%v", cacheAdminTokenTokenPrefix, data.Token)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, adminTokenRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.AdminUserId, data.Token, data.ExpireTime)
	}, adminTokenAdminUserIdKey, adminTokenTokenKey)
	return ret, err
}

func (m *defaultAdminTokenModel) Update(ctx context.Context, newData *AdminToken) error {
	data, err := m.FindOne(ctx, newData.AdminUserId)
	if err != nil {
		return err
	}

	adminTokenAdminUserIdKey := fmt.Sprintf("%s%v", cacheAdminTokenAdminUserIdPrefix, data.AdminUserId)
	adminTokenTokenKey := fmt.Sprintf("%s%v", cacheAdminTokenTokenPrefix, data.Token)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `admin_user_id` = ?", m.table, adminTokenRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Token, newData.ExpireTime, newData.AdminUserId)
	}, adminTokenAdminUserIdKey, adminTokenTokenKey)
	return err
}

func (m *defaultAdminTokenModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAdminTokenAdminUserIdPrefix, primary)
}

func (m *defaultAdminTokenModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `admin_user_id` = ? limit 1", adminTokenRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAdminTokenModel) tableName() string {
	return m.table
}
